"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transform = void 0;
const common_1 = require("./common");
/**
 *
 * @param payload
 * @returns bulkRequestBody
 */
function transform(payload) {
    if (payload === null) {
        return null;
    }
    var bulkRequestBody = '';
    payload.Records.forEach(function (Record) {
        // index name format: cloudtrail-YYYY.MM.DD
        var indexName = [
            'cloudtrail-' + Record.eventTime.substring(0, 4),
            Record.eventTime.substring(5, 7),
            Record.eventTime.substring(8, 10) // day
        ].join('.');
        var source = common_1.buildSource(Record);
        source['@timestamp'] = Record.eventTime;
        source['@message'] = JSON.stringify(Record);
        source['@owner'] = payload.owner;
        //issue 1, source["requestParameters"]["filter"] will cause ES reject
        try {
            source["requestParameters"]["filter"] = convertArrayIntoObject(source["requestParameters"]["filter"]);
        }
        catch (ex) {
            console.log("Transform error! ", ex);
        }
        //Using ElasticSearch created _id.
        var action = {
            "index": {
                "_index": "",
                "_type": "",
            }
        };
        action.index._index = indexName;
        action.index._type = "cloudtrail-s3";
        bulkRequestBody += [
            JSON.stringify(action),
            JSON.stringify(source),
        ].join('\n') + '\n';
    });
    return bulkRequestBody;
}
exports.transform = transform;
function isArray(o) {
    return Object.prototype.toString.call(o) == '[object Array]';
}
function convertArrayIntoObject(temp_value) {
    if (isArray(temp_value)) {
        return { 'value': temp_value };
    }
    else {
        return temp_value;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xvdWRUcmFpbFdvcmtlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNsb3VkVHJhaWxXb3JrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQXNDO0FBQ3RDOzs7O0dBSUc7QUFDSCxTQUFTLFNBQVMsQ0FBQyxPQUFZO0lBQzNCLElBQUksT0FBTyxLQUFLLElBQUksRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQztLQUNmO0lBRUQsSUFBSSxlQUFlLEdBQUcsRUFBRSxDQUFDO0lBRXpCLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsTUFBVztRQUN6QywyQ0FBMkM7UUFDM0MsSUFBSSxTQUFTLEdBQUc7WUFDWixhQUFhLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNoRCxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2hDLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBb0IsTUFBTTtTQUM5RCxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVaLElBQUksTUFBTSxHQUFHLG9CQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFakMsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7UUFDeEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFFakMscUVBQXFFO1FBQ3JFLElBQUk7WUFDQSxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQ3pHO1FBQUMsT0FBTyxFQUFFLEVBQUU7WUFDVCxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ3hDO1FBRUQsa0NBQWtDO1FBQ2xDLElBQUksTUFBTSxHQUFHO1lBQ1QsT0FBTyxFQUFFO2dCQUNMLFFBQVEsRUFBRSxFQUFFO2dCQUNaLE9BQU8sRUFBRSxFQUFFO2FBQ2Q7U0FDSixDQUFDO1FBQ0YsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLGVBQWUsQ0FBQztRQUVyQyxlQUFlLElBQUk7WUFDZixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztZQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztTQUN6QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDeEIsQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLGVBQWUsQ0FBQztBQUMzQixDQUFDO0FBY1EsOEJBQVM7QUFabEIsU0FBUyxPQUFPLENBQUMsQ0FBTTtJQUNuQixPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQztBQUNqRSxDQUFDO0FBRUQsU0FBUyxzQkFBc0IsQ0FBQyxVQUFlO0lBQzNDLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQ3JCLE9BQU8sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUE7S0FDakM7U0FBTTtRQUNILE9BQU8sVUFBVSxDQUFDO0tBQ3JCO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJ1aWxkU291cmNlIH0gZnJvbSAnLi9jb21tb24nXG4vKipcbiAqIFxuICogQHBhcmFtIHBheWxvYWQgXG4gKiBAcmV0dXJucyBidWxrUmVxdWVzdEJvZHlcbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtKHBheWxvYWQ6IGFueSkge1xuICAgIGlmIChwYXlsb2FkID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBidWxrUmVxdWVzdEJvZHkgPSAnJztcblxuICAgIHBheWxvYWQuUmVjb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChSZWNvcmQ6IGFueSkge1xuICAgICAgICAvLyBpbmRleCBuYW1lIGZvcm1hdDogY2xvdWR0cmFpbC1ZWVlZLk1NLkREXG4gICAgICAgIHZhciBpbmRleE5hbWUgPSBbXG4gICAgICAgICAgICAnY2xvdWR0cmFpbC0nICsgUmVjb3JkLmV2ZW50VGltZS5zdWJzdHJpbmcoMCwgNCksICAgIC8vIHllYXJcbiAgICAgICAgICAgIFJlY29yZC5ldmVudFRpbWUuc3Vic3RyaW5nKDUsIDcpLCAgICAgICAgICAgICAgICAgICAgLy8gbW9udGhcbiAgICAgICAgICAgIFJlY29yZC5ldmVudFRpbWUuc3Vic3RyaW5nKDgsIDEwKSAgICAgICAgICAgICAgICAgICAgLy8gZGF5XG4gICAgICAgIF0uam9pbignLicpO1xuXG4gICAgICAgIHZhciBzb3VyY2UgPSBidWlsZFNvdXJjZShSZWNvcmQpO1xuXG4gICAgICAgIHNvdXJjZVsnQHRpbWVzdGFtcCddID0gUmVjb3JkLmV2ZW50VGltZTtcbiAgICAgICAgc291cmNlWydAbWVzc2FnZSddID0gSlNPTi5zdHJpbmdpZnkoUmVjb3JkKTtcbiAgICAgICAgc291cmNlWydAb3duZXInXSA9IHBheWxvYWQub3duZXI7XG5cbiAgICAgICAgLy9pc3N1ZSAxLCBzb3VyY2VbXCJyZXF1ZXN0UGFyYW1ldGVyc1wiXVtcImZpbHRlclwiXSB3aWxsIGNhdXNlIEVTIHJlamVjdFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc291cmNlW1wicmVxdWVzdFBhcmFtZXRlcnNcIl1bXCJmaWx0ZXJcIl0gPSBjb252ZXJ0QXJyYXlJbnRvT2JqZWN0KHNvdXJjZVtcInJlcXVlc3RQYXJhbWV0ZXJzXCJdW1wiZmlsdGVyXCJdKTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVHJhbnNmb3JtIGVycm9yISBcIiwgZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9Vc2luZyBFbGFzdGljU2VhcmNoIGNyZWF0ZWQgX2lkLlxuICAgICAgICB2YXIgYWN0aW9uID0ge1xuICAgICAgICAgICAgXCJpbmRleFwiOiB7XG4gICAgICAgICAgICAgICAgXCJfaW5kZXhcIjogXCJcIixcbiAgICAgICAgICAgICAgICBcIl90eXBlXCI6IFwiXCIsXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGFjdGlvbi5pbmRleC5faW5kZXggPSBpbmRleE5hbWU7XG4gICAgICAgIGFjdGlvbi5pbmRleC5fdHlwZSA9IFwiY2xvdWR0cmFpbC1zM1wiO1xuXG4gICAgICAgIGJ1bGtSZXF1ZXN0Qm9keSArPSBbXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShhY3Rpb24pLFxuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoc291cmNlKSxcbiAgICAgICAgXS5qb2luKCdcXG4nKSArICdcXG4nO1xuICAgIH0pO1xuICAgIHJldHVybiBidWxrUmVxdWVzdEJvZHk7XG59XG5cbmZ1bmN0aW9uIGlzQXJyYXkobzogYW55KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKSA9PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0QXJyYXlJbnRvT2JqZWN0KHRlbXBfdmFsdWU6IGFueSkge1xuICAgIGlmIChpc0FycmF5KHRlbXBfdmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB7ICd2YWx1ZSc6IHRlbXBfdmFsdWUgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0ZW1wX3ZhbHVlO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgdHJhbnNmb3JtIH0iXX0=