"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transform = void 0;
const common_1 = require("./common");
/**
 *
 * @param payload
 * @returns bulkRequestBody
 */
function transform(payload) {
    if (payload === null) {
        return null;
    }
    var bulkRequestBody = '';
    payload.Records.forEach(function (Record) {
        // index name format: cloudtrail-YYYY.MM.DD
        var indexName = [
            'cloudtrail-' + Record.eventTime.substring(0, 4),
            Record.eventTime.substring(5, 7),
            Record.eventTime.substring(8, 10) // day
        ].join('.');
        var source = common_1.buildSource(Record);
        source['@timestamp'] = Record.eventTime;
        source['@message'] = JSON.stringify(Record);
        source['@owner'] = payload.owner;
        //issue 1, source["requestParameters"]["filter"] will cause ES reject
        try {
            source["requestParameters"]["filter"] = convertArrayIntoObject(source["requestParameters"]["filter"]);
        }
        catch (ex) {
            console.log("Transform error! ", ex);
        }
        //issue 2, typeof source["responseElements"]["role"] === string will cause ES reject
        if (source["responseElements"] != null && source["responseElements"].hasOwnProperty("role")) {
            try {
                source["responseElements"]["role"] = convertStringIntoObject(source["responseElements"]["role"]);
            }
            catch (err) {
                console.log("Transform CloudTrail issue 2 error! ", err);
            }
        }
        //Using ElasticSearch created _id.
        var action = {
            "index": {
                "_index": "",
                "_type": "",
            }
        };
        action.index._index = indexName;
        action.index._type = "cloudtrail-s3";
        bulkRequestBody += [
            JSON.stringify(action),
            JSON.stringify(source),
        ].join('\n') + '\n';
    });
    return bulkRequestBody;
}
exports.transform = transform;
function isArray(o) {
    return Object.prototype.toString.call(o) == '[object Array]';
}
function convertArrayIntoObject(temp_value) {
    if (isArray(temp_value)) {
        return { 'value': temp_value };
    }
    else {
        return temp_value;
    }
}
function convertStringIntoObject(temp_value) {
    if (typeof temp_value === 'string') {
        return { 'value': temp_value };
    }
    else {
        return temp_value;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xvdWRUcmFpbFdvcmtlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNsb3VkVHJhaWxXb3JrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQXNDO0FBQ3RDOzs7O0dBSUc7QUFDSCxTQUFTLFNBQVMsQ0FBQyxPQUFZO0lBQzNCLElBQUksT0FBTyxLQUFLLElBQUksRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQztLQUNmO0lBRUQsSUFBSSxlQUFlLEdBQUcsRUFBRSxDQUFDO0lBRXpCLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsTUFBVztRQUN6QywyQ0FBMkM7UUFDM0MsSUFBSSxTQUFTLEdBQUc7WUFDWixhQUFhLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNoRCxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2hDLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBb0IsTUFBTTtTQUM5RCxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVaLElBQUksTUFBTSxHQUFHLG9CQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFakMsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7UUFDeEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFFakMscUVBQXFFO1FBQ3JFLElBQUk7WUFDQSxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQ3pHO1FBQUMsT0FBTyxFQUFFLEVBQUU7WUFDVCxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ3hDO1FBRUQsb0ZBQW9GO1FBQ3BGLElBQUksTUFBTSxDQUFDLGtCQUFrQixDQUFDLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUN6RixJQUFJO2dCQUNBLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7YUFDcEc7WUFBQyxPQUFPLEdBQUcsRUFBRTtnQkFDVixPQUFPLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQzVEO1NBQ0o7UUFFRCxrQ0FBa0M7UUFDbEMsSUFBSSxNQUFNLEdBQUc7WUFDVCxPQUFPLEVBQUU7Z0JBQ0wsUUFBUSxFQUFFLEVBQUU7Z0JBQ1osT0FBTyxFQUFFLEVBQUU7YUFDZDtTQUNKLENBQUM7UUFDRixNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7UUFDaEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsZUFBZSxDQUFDO1FBRXJDLGVBQWUsSUFBSTtZQUNmLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO1NBQ3pCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQztJQUN4QixDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sZUFBZSxDQUFDO0FBQzNCLENBQUM7QUFzQlEsOEJBQVM7QUFwQmxCLFNBQVMsT0FBTyxDQUFDLENBQU07SUFDbkIsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksZ0JBQWdCLENBQUM7QUFDakUsQ0FBQztBQUVELFNBQVMsc0JBQXNCLENBQUMsVUFBZTtJQUMzQyxJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUNyQixPQUFPLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFBO0tBQ2pDO1NBQU07UUFDSCxPQUFPLFVBQVUsQ0FBQztLQUNyQjtBQUNMLENBQUM7QUFFRCxTQUFTLHVCQUF1QixDQUFDLFVBQWU7SUFDNUMsSUFBSSxPQUFPLFVBQVUsS0FBSyxRQUFRLEVBQUU7UUFDaEMsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQTtLQUNqQztTQUFNO1FBQ0gsT0FBTyxVQUFVLENBQUM7S0FDckI7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnVpbGRTb3VyY2UgfSBmcm9tICcuL2NvbW1vbidcbi8qKlxuICogXG4gKiBAcGFyYW0gcGF5bG9hZCBcbiAqIEByZXR1cm5zIGJ1bGtSZXF1ZXN0Qm9keVxuICovXG5mdW5jdGlvbiB0cmFuc2Zvcm0ocGF5bG9hZDogYW55KSB7XG4gICAgaWYgKHBheWxvYWQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGJ1bGtSZXF1ZXN0Qm9keSA9ICcnO1xuXG4gICAgcGF5bG9hZC5SZWNvcmRzLmZvckVhY2goZnVuY3Rpb24gKFJlY29yZDogYW55KSB7XG4gICAgICAgIC8vIGluZGV4IG5hbWUgZm9ybWF0OiBjbG91ZHRyYWlsLVlZWVkuTU0uRERcbiAgICAgICAgdmFyIGluZGV4TmFtZSA9IFtcbiAgICAgICAgICAgICdjbG91ZHRyYWlsLScgKyBSZWNvcmQuZXZlbnRUaW1lLnN1YnN0cmluZygwLCA0KSwgICAgLy8geWVhclxuICAgICAgICAgICAgUmVjb3JkLmV2ZW50VGltZS5zdWJzdHJpbmcoNSwgNyksICAgICAgICAgICAgICAgICAgICAvLyBtb250aFxuICAgICAgICAgICAgUmVjb3JkLmV2ZW50VGltZS5zdWJzdHJpbmcoOCwgMTApICAgICAgICAgICAgICAgICAgICAvLyBkYXlcbiAgICAgICAgXS5qb2luKCcuJyk7XG5cbiAgICAgICAgdmFyIHNvdXJjZSA9IGJ1aWxkU291cmNlKFJlY29yZCk7XG5cbiAgICAgICAgc291cmNlWydAdGltZXN0YW1wJ10gPSBSZWNvcmQuZXZlbnRUaW1lO1xuICAgICAgICBzb3VyY2VbJ0BtZXNzYWdlJ10gPSBKU09OLnN0cmluZ2lmeShSZWNvcmQpO1xuICAgICAgICBzb3VyY2VbJ0Bvd25lciddID0gcGF5bG9hZC5vd25lcjtcblxuICAgICAgICAvL2lzc3VlIDEsIHNvdXJjZVtcInJlcXVlc3RQYXJhbWV0ZXJzXCJdW1wiZmlsdGVyXCJdIHdpbGwgY2F1c2UgRVMgcmVqZWN0XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzb3VyY2VbXCJyZXF1ZXN0UGFyYW1ldGVyc1wiXVtcImZpbHRlclwiXSA9IGNvbnZlcnRBcnJheUludG9PYmplY3Qoc291cmNlW1wicmVxdWVzdFBhcmFtZXRlcnNcIl1bXCJmaWx0ZXJcIl0pO1xuICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJUcmFuc2Zvcm0gZXJyb3IhIFwiLCBleCk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2lzc3VlIDIsIHR5cGVvZiBzb3VyY2VbXCJyZXNwb25zZUVsZW1lbnRzXCJdW1wicm9sZVwiXSA9PT0gc3RyaW5nIHdpbGwgY2F1c2UgRVMgcmVqZWN0XG4gICAgICAgIGlmIChzb3VyY2VbXCJyZXNwb25zZUVsZW1lbnRzXCJdICE9IG51bGwgJiYgc291cmNlW1wicmVzcG9uc2VFbGVtZW50c1wiXS5oYXNPd25Qcm9wZXJ0eShcInJvbGVcIikpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgc291cmNlW1wicmVzcG9uc2VFbGVtZW50c1wiXVtcInJvbGVcIl0gPSBjb252ZXJ0U3RyaW5nSW50b09iamVjdChzb3VyY2VbXCJyZXNwb25zZUVsZW1lbnRzXCJdW1wicm9sZVwiXSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRyYW5zZm9ybSBDbG91ZFRyYWlsIGlzc3VlIDIgZXJyb3IhIFwiLCBlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy9Vc2luZyBFbGFzdGljU2VhcmNoIGNyZWF0ZWQgX2lkLlxuICAgICAgICB2YXIgYWN0aW9uID0ge1xuICAgICAgICAgICAgXCJpbmRleFwiOiB7XG4gICAgICAgICAgICAgICAgXCJfaW5kZXhcIjogXCJcIixcbiAgICAgICAgICAgICAgICBcIl90eXBlXCI6IFwiXCIsXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGFjdGlvbi5pbmRleC5faW5kZXggPSBpbmRleE5hbWU7XG4gICAgICAgIGFjdGlvbi5pbmRleC5fdHlwZSA9IFwiY2xvdWR0cmFpbC1zM1wiO1xuXG4gICAgICAgIGJ1bGtSZXF1ZXN0Qm9keSArPSBbXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShhY3Rpb24pLFxuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoc291cmNlKSxcbiAgICAgICAgXS5qb2luKCdcXG4nKSArICdcXG4nO1xuICAgIH0pO1xuICAgIHJldHVybiBidWxrUmVxdWVzdEJvZHk7XG59XG5cbmZ1bmN0aW9uIGlzQXJyYXkobzogYW55KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKSA9PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0QXJyYXlJbnRvT2JqZWN0KHRlbXBfdmFsdWU6IGFueSkge1xuICAgIGlmIChpc0FycmF5KHRlbXBfdmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB7ICd2YWx1ZSc6IHRlbXBfdmFsdWUgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0ZW1wX3ZhbHVlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY29udmVydFN0cmluZ0ludG9PYmplY3QodGVtcF92YWx1ZTogYW55KSB7XG4gICAgaWYgKHR5cGVvZiB0ZW1wX3ZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4geyAndmFsdWUnOiB0ZW1wX3ZhbHVlIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGVtcF92YWx1ZTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IHRyYW5zZm9ybSB9Il19