"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
// v1.1.3
const zlib = require("zlib");
const AWS = require("aws-sdk");
const CloudTrailWorker = require("./CloudTrailWorker");
const S3AccessWorker = require("./S3AccessWorker");
const common_1 = require("./common");
const _region = process.env.AWS_REGION;
let _workType = 'CLOUDTRAIL';
var endpoint = 'vpc-loghub-poaml2l2lbh6ssqbzadioh4gri.us-east-1.es.amazonaws.com';
const handler = async function (event, context) {
    // Get the object from the event and show its content type
    const bucket = event.Records[0].s3.bucket.name;
    const key = decodeURIComponent(event.Records[0].s3.object.key.replace(/\+/g, ' '));
    const params = {
        Bucket: bucket,
        Key: key,
    };
    switch (_workType) {
        case 'CLOUDTRAIL': {
            console.log("Get CloudTrail Log sending job.");
            await sendCloudtrail(params, context);
            break;
        }
        case 'S3ACCESS': {
            console.log("Get S3 Access Log sending job.");
            await sendS3Access(params, context);
            break;
        }
        default:
            throw new Error('Unknown work type, unable to resolve ' + _workType);
    }
};
exports.handler = handler;
/**
 * Worker for sending Amazon S3 Access logs to Amazon ES
 * @param params
 * @param context
 */
async function sendS3Access(params, context) {
    const S3 = new AWS.S3({ region: _region, apiVersion: '2006-03-01' });
    const data = await S3.getObject(params).promise();
    const s3AccessData = data.Body.toString('ascii');
    var elasticsearchBulkData = await S3AccessWorker.transform(s3AccessData);
    var requestParams = await common_1.buildRequest(endpoint, elasticsearchBulkData, _region);
    try {
        await common_1.httpsRequest(params, requestParams);
        context.succeed('Success');
    }
    catch (err) {
        console.error('POST request failed, error:', err);
        console.log('Failed transfer the log file: ', params);
        context.fail(JSON.stringify(err));
    }
    context.succeed('Success');
}
/**
 * Worker for sending Amazon CloudTrail logs which stored in S3 to Amazon ES
 * @param params
 * @param context
 */
async function sendCloudtrail(params, context) {
    if (params.Key.indexOf("CloudTrail/") != -1) {
        const S3 = new AWS.S3({ region: _region, apiVersion: '2006-03-01' });
        const data = await S3.getObject(params).promise();
        var zippedInput = await Buffer.from(data.Body, 'base64');
        const awslogsData = JSON.parse(await zlib.gunzipSync(zippedInput).toString('utf8'));
        var elasticsearchBulkData = await CloudTrailWorker.transform(awslogsData);
        var requestParams = await common_1.buildRequest(endpoint, elasticsearchBulkData, _region);
        try {
            await common_1.httpsRequest(params, requestParams);
            context.succeed('Success');
        }
        catch (err) {
            console.error('POST request failed, error:', err);
            console.log('Failed transfer the log file: ', params);
            context.fail(JSON.stringify(err));
        }
        context.succeed('Success');
    }
    else {
        console.log('Skip: The S3 object\'s key does not match CloudTrail/ formate, the key is: ', params.Key);
        context.succeed('Success');
    }
}
//# sourceMappingURL=data:application/json;base64,